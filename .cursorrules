# Rust Instructions
- Follow clean code principles. Prefer small and pure functions. Unit test them.
- Run tests using `just test-module docs-rs-mcp {file_name}`. For example, `just test-module docs-rs-mcp crate_items`. If running the tests results in PowerShell issues, don't worry about them and focus on fixing the result of the test output.
- Never use unwrap() in Rust, preferring anyhow's context(), expect(), ? or something else instead.
- Never use mapper functions. Always prefer implementing the Try/From traits.
- When writing a unit test and using an assert macro, always include a message.
- Domain models should never have public fields. Always add getters.
- Prefer using workspace dependencies when it makes sense. It doesn't make sense with database related dependencies.
- Always use the chrono crate for date and time operations. Never use the time crate.
- Always document crates, modules, functions, structs, enums, struct fields and other code elements as per Rust best practice.
- Always use the instrument macro from tracing crate to instrument functions. If the function can return an error, use the err field in the macro. If the function can return a result that isn't too complex, use the ret field in the macro.
Always use private fields in structs and use public getters and modifier functions.